datalight:
  service:
    name: MONITOR
    version: 2.46.0
    tgz: dlc-monitor-2.46.0.tar.gz
    conf-dirs:
#      - service-conf-dir: '{{SERVICE_DIR}}/MONITOR/prometheus/bin'
#        templated-dir: '{{DATALIGHT_DIR}}/plugins/MONITOR/templated/prometheus/bin'
#
#      - service-conf-dir: '{{SERVICE_DIR}}/MONITOR/prometheus'
#        templated-dir: '{{DATALIGHT_DIR}}/plugins/MONITOR/templated/prometheus/conf'
#
#      - service-conf-dir: '{{SERVICE_DIR}}/MONITOR/alertmanager/bin'
#        templated-dir: '{{DATALIGHT_DIR}}/plugins/MONITOR/templated/alertmanager/bin'
#
#      - service-conf-dir: '{{SERVICE_DIR}}/MONITOR/alertmanager'
#        templated-dir: '{{DATALIGHT_DIR}}/plugins/MONITOR/templated/alertmanager/conf'
#
#      - service-conf-dir: '{{SERVICE_DIR}}/MONITOR/exporter/mysql/bin'
#        templated-dir: '{{DATALIGHT_DIR}}/plugins/MONITOR/templated/exporter/mysql/bin'
#
#      - service-conf-dir: '{{SERVICE_DIR}}/MONITOR/exporter/mysql'
#        templated-dir: '{{DATALIGHT_DIR}}/plugins/MONITOR/templated/exporter/mysql/conf'
#
#      - service-conf-dir: '{{SERVICE_DIR}}/MONITOR/exporter/node/bin'
#        templated-dir: '{{DATALIGHT_DIR}}/plugins/MONITOR/templated/exporter/node/bin'
#
#      - service-conf-dir: '{{SERVICE_DIR}}/MONITOR/grafana/bin'
#        templated-dir: '{{DATALIGHT_DIR}}/plugins/MONITOR/templated/grafana/bin'
#
  #      - service-conf-dir: '{{SERVICE_DIR}}/MONITOR/grafana/conf'
#        templated-dir: '{{DATALIGHT_DIR}}/plugins/MONITOR/templated/grafana/conf'
      # TODO FOR TEST
      - service-conf-dir: '{{SERVICE_DIR}}/MONITOR/prometheus/bin'
        templated-dir: 'D:/datalight/plugins/MONITOR/templated/prometheus/bin'

      - service-conf-dir: '{{SERVICE_DIR}}/MONITOR/prometheus'
        templated-dir: 'D:/datalight/plugins/MONITOR/templated/prometheus/conf'

      - service-conf-dir: '{{SERVICE_DIR}}/MONITOR/alertmanager/bin'
        templated-dir: 'D:/datalight/plugins/MONITOR/templated/alertmanager/bin'

      - service-conf-dir: '{{SERVICE_DIR}}/MONITOR/alertmanager'
        templated-dir: 'D:/datalight/plugins/MONITOR/templated/alertmanager/conf'

      - service-conf-dir: '{{SERVICE_DIR}}/MONITOR/exporter/mysql/bin'
        templated-dir: 'D:/datalight/plugins/MONITOR/templated/exporter/mysql/bin'

      - service-conf-dir: '{{SERVICE_DIR}}/MONITOR/exporter/mysql'
        templated-dir: 'D:/datalight/plugins/MONITOR/templated/exporter/mysql/conf'

      - service-conf-dir: '{{SERVICE_DIR}}/MONITOR/exporter/node/bin'
        templated-dir: 'D:/datalight/plugins/MONITOR/templated/exporter/node/bin'

      - service-conf-dir: '{{SERVICE_DIR}}/MONITOR/grafana/bin'
        templated-dir: 'D:/datalight/plugins/MONITOR/templated/grafana/bin'

      - service-conf-dir: '{{SERVICE_DIR}}/MONITOR/grafana/conf'
        templated-dir: 'D:/datalight/plugins/MONITOR/templated/grafana/conf'

    config-event-handler-jar: 'plugins-monitor-1.0.0.jar'
    config-event-handler-clazz: 'cn.boundivore.dl.plugin.monitor.config.event.ConfigEventHandler'

    initialize:
      steps:
        - type: COMMON_SCRIPT
          name: '清理过期的部署环境'
          shell: 'service-remove.sh'
          args: [ ]
          interactions: [ ]
          exits: '0'
          timeout: 10000
          sleep: 0

        - type: COMMON_SCRIPT
          name: '初始化部署服务所需的环境'
          shell: 'service-init-env.sh'
          args: [ ]
          interactions: [ ]
          exits: '0'
          timeout: 60000
          sleep: 0

        - type: JAR
          name: '初始化服务配置文件'
          jar: 'plugins-monitor-1.0.0.jar'
          clazz: 'cn.boundivore.dl.plugin.monitor.config.ConfigMonitor'
          args: [ ]
          interactions: [ ]
          exits: '0'
          sleep: 0

    components:
      - name: Prometheus
        priority: 1
        max: 1
        min: 1
        mutexes: [ ]
        actions:
          - type: DEPLOY
            start-state: DEPLOYING
            success-state: STARTED
            fail-state: SELECTED
            steps:
              - type: SCRIPT
                name: '部署后启动 Prometheus'
                shell: 'monitor-operation.sh'
                args: [ 'Prometheus', 'start' ]
                interactions: [ ]
                exits: '0'
                timeout: 60000
                sleep: 1000

          - type: START
            steps:
              - type: SCRIPT
                name: '启动 Prometheus'
                shell: 'monitor-operation.sh'
                args: [ 'Prometheus', 'start' ]
                interactions: [ ]
                exits: '0'
                sleep: 1000

          - type: STOP
            steps:
              - type: SCRIPT
                name: '停止 Prometheus'
                shell: 'monitor-operation.sh'
                args: [ 'Prometheus', 'stop' ]
                interactions: [ ]
                exits: '0'
                sleep: 1000

          - type: RESTART
            steps:
              - type: SCRIPT
                name: '重启 Prometheus'
                shell: 'monitor-operation.sh'
                args: [ 'Prometheus', 'restart' ]
                interactions: [ ]
                exits: '0'
                sleep: 1000

      - name: AlertManager
        priority: 2
        max: 1
        min: 1
        mutexes: [ ]
        actions:
          - type: DEPLOY
            start-state: DEPLOYING
            success-state: STARTED
            fail-state: SELECTED
            steps:
              - type: SCRIPT
                name: '部署后启动 AlertManager'
                shell: 'monitor-operation.sh'
                args: [ 'AlertManager', 'start' ]
                interactions: [ ]
                exits: '0'
                timeout: 60000
                sleep: 1000

          - type: START
            steps:
              - type: SCRIPT
                name: '启动 AlertManager'
                shell: 'monitor-operation.sh'
                args: [ 'AlertManager', 'start' ]
                interactions: [ ]
                exits: '0'
                sleep: 1000

          - type: STOP
            steps:
              - type: SCRIPT
                name: '停止 AlertManager'
                shell: 'monitor-operation.sh'
                args: [ 'AlertManager', 'stop' ]
                interactions: [ ]
                exits: '0'
                sleep: 1000

          - type: RESTART
            steps:
              - type: SCRIPT
                name: '重启 AlertManager'
                shell: 'monitor-operation.sh'
                args: [ 'AlertManager', 'restart' ]
                interactions: [ ]
                exits: '0'
                sleep: 1000

      - name: MySQLExporter
        priority: 3
        max: -1
        min: -1
        mutexes: [ ]
        actions:
          - type: DEPLOY
            start-state: DEPLOYING
            success-state: STARTED
            fail-state: SELECTED
            steps:
              - type: SCRIPT
                name: '部署后启动 MySQLExporter'
                shell: 'monitor-operation.sh'
                args: [ 'MySQLExporter', 'start' ]
                interactions: [ ]
                exits: '0'
                timeout: 60000
                sleep: 1000

          - type: START
            steps:
              - type: SCRIPT
                name: '启动 MySQLExporter'
                shell: 'monitor-operation.sh'
                args: [ 'MySQLExporter', 'start' ]
                interactions: [ ]
                exits: '0'
                sleep: 1000

          - type: STOP
            steps:
              - type: SCRIPT
                name: '停止 MySQLExporter'
                shell: 'monitor-operation.sh'
                args: [ 'MySQLExporter', 'stop' ]
                interactions: [ ]
                exits: '0'
                sleep: 1000

          - type: RESTART
            steps:
              - type: SCRIPT
                name: '重启 MySQLExporter'
                shell: 'monitor-operation.sh'
                args: [ 'MySQLExporter', 'restart' ]
                interactions: [ ]
                exits: '0'
                sleep: 1000

      - name: NodeExporter
        priority: 4
        max: -1
        min: -1
        mutexes: [ ]
        actions:
          - type: DEPLOY
            start-state: DEPLOYING
            success-state: STARTED
            fail-state: SELECTED
            steps:
              - type: SCRIPT
                name: '部署后启动 NodeExporter'
                shell: 'monitor-operation.sh'
                args: [ 'NodeExporter', 'start' ]
                interactions: [ ]
                exits: '0'
                timeout: 60000
                sleep: 1000

          - type: START
            steps:
              - type: SCRIPT
                name: '启动 NodeExporter'
                shell: 'monitor-operation.sh'
                args: [ 'NodeExporter', 'start' ]
                interactions: [ ]
                exits: '0'
                sleep: 1000

          - type: STOP
            steps:
              - type: SCRIPT
                name: '停止 NodeExporter'
                shell: 'monitor-operation.sh'
                args: [ 'NodeExporter', 'stop' ]
                interactions: [ ]
                exits: '0'
                sleep: 1000

          - type: RESTART
            steps:
              - type: SCRIPT
                name: '重启 NodeExporter'
                shell: 'monitor-operation.sh'
                args: [ 'NodeExporter', 'restart' ]
                interactions: [ ]
                exits: '0'
                sleep: 1000

      - name: Grafana
        priority: 5
        max: 1
        min: 1
        mutexes: [ ]
        actions:
          - type: DEPLOY
            start-state: DEPLOYING
            success-state: STARTED
            fail-state: SELECTED
            steps:
              - type: SCRIPT
                name: '部署后启动 Grafana'
                shell: 'monitor-operation.sh'
                args: [ 'Grafana', 'start' ]
                interactions: [ ]
                exits: '0'
                timeout: 60000
                sleep: 1000

          - type: START
            steps:
              - type: SCRIPT
                name: '启动 Grafana'
                shell: 'monitor-operation.sh'
                args: [ 'Grafana', 'start' ]
                interactions: [ ]
                exits: '0'
                sleep: 1000

          - type: STOP
            steps:
              - type: SCRIPT
                name: '停止 Grafana'
                shell: 'monitor-operation.sh'
                args: [ 'Grafana', 'stop' ]
                interactions: [ ]
                exits: '0'
                sleep: 1000

          - type: RESTART
            steps:
              - type: SCRIPT
                name: '重启 Grafana'
                shell: 'monitor-operation.sh'
                args: [ 'Grafana', 'restart' ]
                interactions: [ ]
                exits: '0'
                sleep: 1000